网络编程：基于网络实现程序交互
   客户端 <=> 服务端
   浏览器 <=> 服务端


网络编程三要素：
1. IP地址  是网络中计算机的唯一标记。 定位网络中的一台计算机
2. 端口号   程序在计算机中的唯一标记。 定位计算机的某个程序
3. 通信协议  协议即规则。  程序之间在网络中通信需要按照规则实现。


TCP协议的客户端：java.net.Socket
TCP协议的服务端：java.net.ServerSocket



学习设计模式的目的：
1. 面试
2. 解决开发的问题



已学习过的设计模式：
1. 模板模式
2. 装饰模式
3. 单例模式
4. 多例模式
5. 工厂模式
6. 代理模式（后续）
享元设计模式


单例模式：
    解决的问题： 保证程序中运行的某个类只能创建一个对象（节省空间、共享数据）

单例模式的实现步骤：
1. 类中的构造方法私有化
2. 类中提供一个静态的方法（让外部获取到当前类的实例对象）
3. 在当前类中创建一个实例对象（唯一对象）


单例模式的分类：
1. 饿汉式 ： 随着类的加载就把唯一对象创建完成
2. 懒汉式 ： 当需要使用对象时，才会创建




单例：保证程序中类仅有一个对象
多例：保证程序中类仅有固定数量对象





public class Student{
   ....
}

//耦合性高: 当更换类时，需要修改代码
MyStudent stu = new MyStudent();


//新方案： 接口或父类
public interface Person{
}
public class Student implements Person{
 ...
}
public class Worker implements Person{
 ....
}
//耦合降低了，但还是存在耦合
Person p = new Student();//多态



//新方案： 工厂模式  （解决类和类之间耦合问题）

public class 工厂类 {
   //实现对象的创建 （例：创建学生对象、创建老师对象、创建工人对象、....）

   //私有构造方法
   private 工厂类(){}

   //静态方法
   public static Person getInstance(String name){
       if("teacher".eqauls(name)){
          return new Teacher();
       }
       if("student".equals(name)){
          return new Student();
       }
   }
}

//配置文件: bean.properties
name=teacher

//使用工具类，加载bean.properties配置文件
ResourceBundle rb = ResourceBundle.getBundle("bean");
String beanName = rb.getString("name");

Person p = 工厂类.getInstance( beanName );

//由程序员主动创建对象，变为被动在获取对象 （对象的创建权转移到：工厂类）




在开发中，通常一个类中会书写很多方法
一个项目中，会书写很多类

方法即功能。开发完成功能后，想要测试功能










多线程开发：并发编程

多线程程序的好处：提高程序的效率


多线程程序如何开发？
方式1 ： Thread类（java语言提供的现成的线程类）
    1. 创建一个子类，继承Thread类    （创建的子类：也是线程类）
    2. 在子类中，编写让线程帮助完成的任务（任务代码）
         //重写Thread类中的run方法（线程任务）
    3. 启动线程

    弊端：类只能单一继承
    public class 子类 extends Father  {  //问题：还能在继承Threa类吗？
    }


方式2 ：Runnable接口 （接口可以多实现，而且允许子类在继承其他父类）  【推荐 ： 灵活度高】
    1. 创建一个子类， 实现Runnable接口
    2. 在子类中，重写Runnable接口中的方法：run  （线程任务方法）
    3. 创建Thread类对象， 并把实现了Runnable接口的子类对象，作为参数传递给Thread类对象
        new Thread(  Runnable类型的对象   )
    4. 启动线程



多线程程序的开发方式：
方式1 ：Thread
1. 创建子类，继承Thread类 （不能在继承其他父类了）
2. 子类中重写run方法  （线程任务）
2. 创建子类对象，调用start方法（启动线程）

//线程任务、线程功能     全部都在Thread子类中

方式2 ： Runnable
1. 创建子类 ，实现Runnable  （可以继承其他父类）
2. 重写run方法 （线程任务）
3. 创建Thread类对象， 并指定要执行的线程任务（Runnable实现类对象作为参数，传递到Thread类的构造方法中）
4. Thread类对象.start()  （启动线程）

//线程任务 ： Runnable接口实现类
//线程功能 ： Thread类
推荐使用Runnable接口的方式，好处：解耦

接口的作用：
1. 制定规则
2. 可以降低耦合  （耦合：紧密连接的程度）   //程序都是要求低耦合




并发编程
-- 什么是并发编程
   在一个程序中开启多个线程，让多个线程执行相同的任务，从而提高程序执行效率。

-- 并发编程解决程序中的什么问题
   提高程序的运行效率、提高使用者体验

-- 并发编程怎么写
   1、Thread类
   2、Runnable接口







在Java程序中运行的线程都有属于自己的名字。
例：main方法，就代表主线程（线程名字：main）
   新线程名字： Thread-0 、Thread-1、............

String  getName()  //获取线程的名字
void  setName(String name) //给线程设置一个名字


static  Thread   currentThread() //获取当前正在运行的线程对象


static  void  sleep(long 毫秒)  //让当前运行的线程休息（单位 ：毫秒）

void join()  //挂起其他线程，仅当前线程运行




发生线程安全问题的原因： 多个线程对同一个数据，进行读写操作，造成数据错乱


线程安全问题的解决思想： 把多个线程操作的共享数据，存放到一个安全的环境中
java语言基于线程安全问题，提供了：同步机制

同步：
1. 同步代码块
2. 同步方法
3. Lock锁



同步方法：
    修饰符号 synchronized 返回值类型  方法名(参数列表){
    }

    同步方法也有对象锁：
    1. this锁  （当前对象锁）
    2. 类名.class （静态方法上的对象锁）











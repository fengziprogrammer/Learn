1.对象（Object）
    - 对象是一种复合数据类型，在对象中可以存储其他的数据
    - 对象实际上就是数据的容器
    - 对象中所存储的数据称为属性

    - 创建对象：
        - 使用typeof 检查一个 对象时会返回 'object'
        - 例子：
            let obj = Object();
            let obj = new Object();
            let obj = {}; *****

    - 向对象中添加属性
        语法：
            对象.属性名 = 属性值;
            对象['属性名'] = 属性值;

    - 读取对象中的属性：
        语法：
            对象.属性名 --> 简洁
            对象['属性名'] --> 灵活

    - 删除对象中的属性
        语法：
            delete 对象.属性名
            delete 对象['属性名']

    - 创建对象时，直接指定对象中的属性
        语法：
            {
                属性名:属性值,
                属性名:属性值,
                属性名:属性值
            }

    - 方法（method）：
        - 对象的属性值可以是任意类型，也可以是一个函数
            如果对象的属性值是一个函数，这个函数我们称为是对象的方法
            调用函数称为调用对象的方法。
        - 函数和方法没有本质的区别，只是称呼的不同

    - in运算符
        - in用来检查对象中是否含有某个属性
        - 语法：
            '属性名' in 对象

    - for-in
        - 枚举对象中的属性
        - 语法：
            for(let 变量 in 对象){
                语句...
            }

    - 可变类型
        - 对象是一个可变类型，对象中存储的属性可以被修改
        - 如果修改的是对象的属性，那么其它的所有的指向该对象的变量都会受到影响
        - 变量和变量之间是相互独立的，修改一个变量不会影响其他变量
        - 什么时候是改对象：
            对象.属性 = xxx
            对象['属性'] = xxx

2.函数（function）
    - 函数也是一个对象
    - 函数可以用来存储JS的代码，并且在需要时对其进行调用
    - 创建函数：
        函数声明：
            function 函数名([形参...]){
                语句...
            }

        函数表达式：
            let 函数名 = function([形参...]){
                语句...
            };

        立即执行函数（IIFE）
            (function(){
                语句...
            })();

            (function(){
                语句...
            }());

    - 函数调用
        - 函数调用就是将函数中存储代码执行
        - 语法：函数对象()

    - 使用typeof检查一个函数时，会返回 'function'

    - 参数：
        - 形参（形式参数）
            - 在定义函数时，可以在函数中指定数量不等的形参，
                定义形参就相当于在函数中声明了变量，但是没有赋值

        - 实参（实际参数）
            - 在调用函数时，可以在函数中传递实参，
                实参将会赋值给对应的形参
            - JS不会检查实参的类型和数量
                - 可以传递任意类型的值作为参数
                - 可以传递任意数量的值作为参数
                    等于形参数量 --> 一一对应
                    小于形参数量 --> 没有的就是undefined
                    大于形参数量 --> 多了的不用

    - 返回值
        - 返回值是函数的执行结果，通过return关键字来设置返回值
        - 语法：
            return 值;
        - 注意：
            1.任何值都可以成为函数的返回值
            2.return后不跟值或不写return，相当于return undefined;
            3.return一旦执行，函数直接结束

3.作用域（scope）
    - 作用域就是变量的作用区域
    - 作用域分为两种：
        全局作用域
        局部作用域
            - 块作用域（代码块中使用let声明的变量）
            - 函数作用域

    - 全局作用域（global）
        - 全局作用域在页面加载时创建，在页面关闭时销毁
        - 所有的直接写在script标签内部的变量（函数）都属于全局作用域
        - 全局作用域中的变量是全局变量，函数是全局函数
            可以在页面的任意位置被访问。
            （开发时很少在全局作用域中编写代码！）
        - 全局作用域中有一个全局对象（global object） window
            window对象代表浏览器的窗口
        - 在全局中使用var声明的变量都会作为window对象的属性保存
            函数都会作为window对象的方法保存
        - 如果声明一个变量不适用var关键字，相当于向window中添加属性

    - 变量的提升
        - 使用var声明变量，会在所有的代码执行前被声明，但是不会赋值。
            赋值会在赋值语句执行时才进行。
        - 所以我们可以在一个变量声明前，就对其进行访问。

    - 函数的提升
        - 使用function开头的函数，会自所有的代码执行前被创建，
            所以我们可以在一个函数声明前就对其进行调用

             var a;
             function a() {
                 alert(2);
             }
             function a() {
                 alert(4);
             }

             console.log(a); // 4
             a = 1;
             console.log(a); // 1
             console.log(a); // 1
             a = 3;
             console.log(a); // 3
             console.log(a); // 3
             a = function () {
                 alert(5);
             };
             console.log(a); // 5


    let a = 10;
    function fn(){
        a = 20;
        console.log(a);
    }
    fn();
    console.log(a);

    let a = 10;
    function fn(){
        let a = 20;
        console.log(a);
    }
    fn();
    console.log(a);

    let a = 10;
    function fn(){
        a = 20;
        var a = 30;
        console.log(a);
    }
    fn();
    console.log(a);

    let a = 10;
    function fn(){
        a = 20;
        let a = 30;
        console.log(a);
    }
    fn();
    console.log(a);

    let a = 10;
    function fn(a){
        a = 20;
        console.log(a);
    }
    fn();
    console.log(a);

    let a = 10;
    function fn(a){
        console.log(a);
        a = 20;
        console.log(a);
    }
    fn(a);
    console.log(a);

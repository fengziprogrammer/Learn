类型转换
    - 类型转换指将其他的类型转换为number、string、boolean
    - 转化为string
        显式类型转换
            1.调用toString()方法
                - 例子：
                    let a = 10;
                    a = a.toString()
                - 问题：
                    不适用于 null 和 undefined

            2.调用String()函数
                - 例子：
                    let a = 10;
                    a = String(a);
                - 原理：
                    对于有toString()值，也是调用toString()
                    对于没有toString()的null和undefined，直接转换为 'null'和'undefined'

        隐式类型转换 *****
            1.为任意值加上一个空串，即可将其转换为字符串
                - 例子：
                    let a = 10;
                    a = a + '';

                - 原理：
                    原理同String()函数

    - 转化为number
        显式类型转换
            1. 使用Number()函数
                - 例子：
                    let a = '10';
                    a = Number(a);

                - 不同的情况：
                    字符串
                        - 如果一个字符串是合法的数字，则直接转换为对应的数字
                            如果不合法则转换为NaN
                            如果是空串或空格串，则转换为0

                    布尔值：
                        true --> 1
                        false --> 0

                    null --> 0
                    undefined --> NaN

            2. 专门用来转换字符串的两个函数：
                parseInt()
                    - 将一个字符串解析为一个整数
                parseFloat()
                    - 将一个字符串解析为小数

        隐式类型转换 *****
            1. 使用一元的+来将一个任意值转换为数字
                - 例子：
                    let a = '10';
                    a = +a;
                - 原理：
                    同Number()函数

    - 转化为boolean
        显式类型转换
            1. 使用Boolean()函数来进行转换
                例子：
                    let a = 123;
                    a = Boolean(a);

                情况：
                    会转换为false的情况：
                        0、NaN、null、undefined、false、''

        隐式类型转换 *****
            2. 为任意值取两次反，来将其转换为布尔值
                例子：
                    let a = 123;
                    a = !!a;

                原理：
                    同Boolean()函数

运算符
    - 运算符也称为操作符，可以对一个或多个值进行各种运算或操作
        - 算术运算符
            + 加法运算符
            - 减法运算符
            * 乘法运算符
            / 除法运算符
            ** 幂运算符 （新增的）
            %  模运算符

            注意：
                除了字符串的加法，其余类型的值进行算术运算时，
                    都会转换为数值然后再运算

        - 一元运算符
            + 正号
            - 负号

            注意：
                使用±号，会发生类型转换（数值）

        - 自增自减运算符
            自增
                a++(后++)
                    - a++会使变量立即自增1，并返回变量自增前的值（原值）
                ++a(前++)
                    - ++a会使变量立即自增1，并返回变量自增后的值（新值）

            自减：
                a--(后--)
                    - a--会使变量立即自减1，并返回变量自减前的值（原值）
                --a(前--)
                    - --a会使变量立即自减1，并返回变量自减后的值（新值）

        - 赋值运算符
            =
                将符号右侧的值赋值给左侧变量
            +=
                a += x 等价于 a = a + x
            -=
            *=
            /=
            **=
            %=

        - 逻辑运算符
            !（逻辑非）
                - 逻辑非用来对一个值进行取反，true变false，false变true
                - 非布尔值会转换为布尔值然后取反

            &&（逻辑与）
                - 与运算是找false的，只要有false就会返回false
                - 与运算是短路的与，如果第一个值是false，则不看第二个值
                - 非布尔值运算时，会返回原值
                - 如果第一个值是false，则直接返回第一个值，
                    如果第一个值为true，则返回第二个值


            ||（逻辑或）
                - 或运算是找true的，有true就返回true，没有返回false
                - 或运算是短路的或，如果第一个值是true，则不看第二个值
                - 非布尔值运算时，会返回原值
                - 如果第一个值是true，则返回第一个值
                    如果第一个值是false，则返回第二个值

        - 关系运算符
            - 关系运算赋用来比较两个值之间大小等于的关系
                如果关系成立，返回true，否则返回false

            >
            >=
            <
            <=
            - 规则同数学运算

            let a = 10;

            5 < a < 20 错的
            a > 5 && a < 20 正确

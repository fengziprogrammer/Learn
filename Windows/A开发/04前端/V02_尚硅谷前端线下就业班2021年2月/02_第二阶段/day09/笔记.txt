- 数组
    - forEach()
        - 用来遍历数组
        - 用法：
            需要一个回调函数作为参数，回调函数会反复调用多次
                每次调用时，将遍历到的信息以参数的形式传递
            - 参数：
                1.element 当前遍历到的元素
                2.index 当前元素的索引
                3.array 当前遍历的数组对象

    - concat()
        - 用来连接两个或多个数组

    - join()
        - 用来将数组中的所有的元素连接为一个字符串
        - 参数：
            需要一个连接符作为参数，默认为","

    - indexOf()
    - lastIndexOf()
        - 用来查询元素在数组中出现的位置
        - 参数：
            1.要查询的元素
            2.查询的起始位置
        - 返回值：
            indexOf() 返回元素第一次出现的位置
            lastIndexOf() 返回元素最后一次出现的位置
            如果没有找到，返回-1

    - reverse()
        - 用来反转数组，会影响到原数组

    - sort()
        - 用来对数组进行排序，默认按照Unicode编码进行排序
        - 可以通过回调函数来指定排序规则：
            - 升序：
                function(a, b){
                    return a - b;
                }

            - 降序：
                function(a, b){
                    return b - a;
                }

            - 乱序：
                function (a, b) {
                    return Math.random() - Math.random();
                }

- 回调函数（callback）
    - 由我们定义，但是不由我们调用的函数被称为回调函数

- 函数（function）
    - arguments
        - arguments是函数中一个隐含的参数，它是一个类数组对象
            函数执行时，所有的实参都会存储到arguments中
            通过它，即使不定义形参也可以直接使用实参

    - call() 和 apply()
        - 它们都是函数的方法，它们可以用来指定函数的this
            它们的第一个参数会成为函数中的this
        - 不同点在于：
            call()的实参是一个一个传递的
            apply()的实参是通过数组来传递
        - 例子：
            fn.call(...);
            fn.apply(...);

    - 递归：
        - 递归就是函数自己调用自己
        - 递归的核心就是对问题的分解，将一个大问题拆分一个一个的小问题
        - 递归两个要点：
            1.基线条件，递归停止条件
            2.递归条件，如果分解问题
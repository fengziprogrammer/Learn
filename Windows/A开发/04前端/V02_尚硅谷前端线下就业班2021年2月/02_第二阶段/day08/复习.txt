- 原型（prototype）
    - 对象的两个层面：
        狭义：在JS中对象指 Object
        广义：在JS中所有的东西都是对象

    - 原型
        - 每一个函数都有一个属性叫做prototype（显示原型），该属性指向的是一个对象
            这个对象就是原型对象
        - 如果函数作为一个构造函数去调用，那么它所创建的实例中都会有一个隐含的属性（__proto__，隐式原型）
            指向函数的显示原型。
            - 实例的隐式原型指向类的显示原型。
        - 原型对象就相当于一个公共的区域，可以被所有的该类实例所共享，
            所以我们可以将实例中共有的属性同意存储到原型中
            这样我们只需创建一个属性（方法），即可使所有实例拥有该属性（方法）

    - 原型链
        - 当访问一个对象的属性时，JS会首先在对象自身中寻找
            如果找到了，则使用
            如果没有找到，则去对象的原型（__proto__）中寻找
            如果找到了，则使用，没找到继续去原型的原型中寻找，以此类推
            直到找到Object的原型，它所有原型的原型，它的原型是null
            如果找到Object的原型，依然没有则返回undefined

- 对象的分类：
    1.内置对象
        - 由ES标准所提供的对象
    2.宿主对象
        - 由运行环境提供的对象 DOM 和 BOM
    3.自定义对象

- 数组（Array）
    - 数组也是一个对象
    - 数组用来存储一组有序的数据
    - 数组中存储的数据称为元素（element）
    - 数组中的每一个元素都有一个唯一的索引（index）与其对应
    - 索引是一组从0开始的整数

    - 创建数组
        let 数组 = new Array();
        let 数组 = [];

    - 创建一个指定大小的数组
        let 数组 = new Array(长度);

    - 创建数组同时，向数组中添加元素
        let 数组 = [元素1, 元素2, 元素3, ...元素N];
        let 数组 = new Array(元素1, 元素2, 元素3, ...元素N);

    - 使用typeof检查一个数组时，会返回'object'
        可以使用类方法（静态方法） Array.isArray(对象) 检查一个对象是否是数组

    - 数组的属性和方法：
        length
            - 获取数组的长度，元素的数量
            - 实际值是数组的最大索引+1
            - length的值可以修改

        push()
            - 向数组的末尾添加一个或多个元素，并返回新的长度
        pop()
            - 删除并返回数组的最后一个元素
        unshift()
            - 向数组的开头添加一个或多个元素，并返回新的长度
        shift()
            - 删除并返回数组的第一个元素
        slice()
            - 用来截取数组，不会影响到原数组
            - 参数：
                1.截取的起始索引（包含起始位置）
                2.截取的结束索引（不包含结束位置）
                - 索引可以是负值，负值是从后往前计算
                - 第二个参数可以省略不写，它会直接截取到最后一个元素
            - 也可以通过slice(0)来完成对数组的浅复制
        splice()
            - 用来删除，替换，插入数组中的元素
            - 参数：
                1.删除的起始索引
                2.删除的数量
                3.要插入的元素
            - 返回值：
                返回被删除的元素